openapi: "3.0.0"
info:
  version: 1.0.0
  title: Bookings, Campground API
servers:
  - url: "http://localhost:5000/api/v1"

security:
  - userToken:
      [
        "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY2MTJjZGEyYzkxMTJiYzgzMTc0YjFiMiIsImlhdCI6MTcxMjUwODMyMiwiZXhwIjoxNzE1MTAwMzIyfQ.eY_tf5w7IORKL2j4a97Kv0SD9CxlRBGHPB8mlBFXhsE",
      ]
  - adminToken: [""]
tags:
  - name: Bookings
    description: The Bookings managing API
  - name: Campground
    description: The Campground managing API
paths:
  /bookings:
    get:
      tags:
        - Bookings
      security:
        - userToken: []
      summary: Get all bookings for a user
      responses:
        "200":
          description: A list of bookings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Booking"
        "500":
          description: Server error
    post:
      tags:
        - Bookings
      summary: Create a new booking
      security:
        - userToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Booking"
      responses:
        "201":
          description: Booking created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Booking"
        "500":
          description: Server error
  /bookings/{id}:
    get:
      tags:
        - Bookings
      summary: Get a specific booking by id
      security:
        - userToken: []
      parameters:
        - name: id
          in: path
          required: true
          description: The Booking id
          schema:
            type: string
      responses:
        "200":
          description: The Booking description by id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Booking"
        "404":
          description: Booking not found
        "500":
          description: Server error
    put:
      tags:
        - Bookings
      summary: Update a specific booking by id
      security:
        - userToken: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The Booking id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Booking"
      responses:
        "200":
          description: Booking updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Booking"
        "404":
          description: Booking not found
        "500":
          description: Server error
    delete:
      tags:
        - Bookings
      summary: Delete a specific booking
      security:
        - userToken: []
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: The booking id
      responses:
        "200":
          description: Booking deleted
        "404":
          description: Booking not found
        "500":
          description: Server error
  /bookings/admin:
    get:
      summary: Get all bookings for an admin
      security:
        - adminToken: []
      responses:
        "200":
          description: A list of bookings
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Booking"
        "500":
          description: Server error
    put:
      summary: Update any booking
      security:
        - adminToken: []
      responses:
        "200":
          description: Booking updated
          schema:
            $ref: "#/components/schemas/Booking"
        "500":
          description: Server error
    delete:
      summary: Delete any booking
      security:
        - adminToken: []
      responses:
        "200":
          description: Booking deleted
        "500":
          description: Server error
  /campground:
    get:
      tags:
        - Campground
      summary: Get all campgrounds
      responses:
        "200":
          $ref: "#/components/responses/ListOfCampgroundsResponse"
        "500":
          $ref: "#/components/responses/InternalServerResponse"
    post:
      security:
        - adminToken: []
      tags:
        - Campground
      summary: Create a new campground
      requestBody:
        required: true
        content:
          application/json:
            examples:
              tiw_campground:
                value:
                  name: tiw_own_campground
                  address: 123 Phayathai Bangkok
                  telephone_number: 09876543

      responses:
        "201":
          $ref: "#/components/responses/SingleCampgroundResponse"
        "500":
          $ref: "#/components/responses/InternalServerResponse"
        "401":
          $ref: "#/components/responses/OnlyRegisteredResponse"
        "403":
          $ref: "#/components/responses/OnlyAdminResponse"
  /campground/{id}:
    get:
      summary: Get a campground by ID
      tags:
        - Campground
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the campground to retrieve
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/SingleCampgroundResponse"
        "401":
          $ref: "#/components/responses/OnlyRegisteredResponse"
        "500":
          $ref: "#/components/responses/InternalServerResponse"
    put:
      tags:
        - Campground
      summary: Update a campground by ID
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the campground to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            examples:
              tiw_campground:
                value:
                  name: tiw_change_campground
                  address: 123 Hwag Khawn Bangkok
      responses:
        "400":
          description: No update provided.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
        "201":
          $ref: "#/components/responses/SingleCampgroundResponse"
        "500":
          $ref: "#/components/responses/InternalServerResponse"
        "401":
          $ref: "#/components/responses/OnlyRegisteredResponse"
        "403":
          $ref: "#/components/responses/OnlyAdminResponse"
    delete:
      tags:
        - Campground
      summary: Delete a campground by ID
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the campground to delete
          schema:
            type: integer
      responses:
        "202":
          $ref: "#/components/responses/SingleCampgroundResponse"
        "500":
          $ref: "#/components/responses/InternalServerResponse"
        "401":
          $ref: "#/components/responses/OnlyRegisteredResponse"
        "403":
          $ref: "#/components/responses/OnlyAdminResponse"
components:
  schemas:
    Booking:
      type: object
      properties:
        apptDate:
          type: array
          items:
            type: string
            format: date-time
        user:
          type: string
        campground:
          type: string
        createAt:
          type: string
          format: date-time
      example:
        apptDate: ["2020-01-01T00:00:00Z", "2020-01-03T00:00:00Z"]
        user: "user1"
        campground: "campground1"
        createAt: "2020-01-01T00:00:00Z"

    Campground:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the campground
        name:
          type: string
          description: Name of the campground
        address:
          type: string
          description: Address of the campground
        telephone_number:
          type: string
          description: Telephone number of the campground

  responses:
    ListOfCampgroundsResponse:
      description: Successful response
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              data:
                type: array
                items:
                  type: array
                  items:
                    $ref: "#/components/schemas/Campground"
    SingleCampgroundResponse:
      description: Successful response. Return a campground as the response.
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              data:
                type: object
                $ref: "#/components/schemas/Campground"
    OnlyRegisteredResponse:
      description: Unauthorized. Only registered users are able to execute this endpoint.
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
    OnlyAdminResponse:
      description: Unauthorized. Only admin users are able to execute this endpoint.
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
    InternalServerResponse:
      description: Internal server error.
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
  securitySchemes:
    userToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
    adminToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
